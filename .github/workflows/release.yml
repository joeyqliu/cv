name: Create Release

on:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Version'
        required: true
        default: 'v'
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Explode GITHUB_REF
        id: github_ref
        run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
          echo ::set-output name=SOURCE_TAG2::${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=SOURCE_TAG3::${GITHUB_REF##*/}
      - name: Echo GITHUB_REF parts
        env:
          SOURCE_NAME: ${{ steps.github_ref.outputs.SOURCE_NAME }}
          SOURCE_BRANCH: ${{ steps.github_ref.outputs.SOURCE_BRANCH }}
          SOURCE_TAG: ${{ steps.github_ref.outputs.SOURCE_TAG }}
          SOURCE_TAG2: ${{ steps.github_ref.outputs.SOURCE_TAG2 }}
          SOURCE_TAG3: ${{ steps.github_ref.outputs.SOURCE_TAG3 }}
        run: |
          echo $SOURCE_NAME
          echo $SOURCE_BRANCH
          echo $SOURCE_TAG
          echo $SOURCE_TAG2
          echo $SOURCE_TAG3
      - name: Set release name based on originating event
        id: get_version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.tags }}
          SOURCE_TAG2: ${{ steps.github_ref.outputs.SOURCE_TAG2 }}
          GIT_BUILD: build-${{ github.run_id }}-${{ github.run_number }}
        run: |
          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then output="$INPUT_VERSION"; else output="$SOURCE_TAG2"; fi
          echo ::set-output name=VERSION::$output
      - name: Echo release name
        run: echo "release name evaluated to '${{ steps.get_version.outputs.VERSION }}'"
  release:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Echo release.dat
        run: echo "Writing 'version = ${{ needs.version.outputs.version }}' to release.dat"
      - name: Update release.dat
        uses: "finnp/create-file-action@master"
        env:
          FILE_NAME: "release.dat"
          FILE_DATA: "version = ${{ needs.version.outputs.version }}"
      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v2
        with:
          root_file: cv.tex
          latexmk_use_lualatex: true
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version.outputs.version }}
          release_name: Release ${{ needs.version.outputs.version }}
          draft: false
          prerelease: true
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./cv.pdf
          asset_name: cv.pdf
          asset_content_type: application/pdf
      - name: Emit repository_dispatch
        uses: mvasigh/dispatch-action@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event_type: dispatch_publish